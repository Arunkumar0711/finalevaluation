package com.ust.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import com.ust.model.UstUser;
import com.ust.model.VendorContact;

public class UstUserDao {
	JdbcTemplate template;

	public void setTemplate(JdbcTemplate template) {
		this.template = template;
	}

	public UstUserDao() {
		super();
		// TODO Auto-generated constructor stub
	}

	// User Validation
	public UstUser selectRole(String username, String password) {
		String sql = "select userid,username,password from ustlogin where username='"
				+ username + "'and password='" + password + "'";
		return template.queryForObject(sql, new Object[] {},
				new BeanPropertyRowMapper<UstUser>(UstUser.class));
	}

	// List Of Active Vendors
	public List<VendorContact> getVendor() {
		return template
				.query("select vendorId,vendorName,vendorAdd,vendorLoc,vendorSer,vendorPin from  vendor where isActive=0",
						new RowMapper<VendorContact>() {
							public VendorContact mapRow(ResultSet rs, int row)
									throws SQLException {
								VendorContact s = new VendorContact();
								s.setVendorId(rs.getInt(1));
								s.setVendorName(rs.getString(2));
								s.setVendorAdd(rs.getString(3));
								s.setVendorLoc(rs.getString(4));
								s.setVendorSer(rs.getString(5));
								s.setVendorPin(rs.getString(6));
								return s;
							}
						});
	}

	// List Vendor by name
	public List<VendorContact> getVendorByName(String vendorName) {
		return template
				.query("select vendorId,vendorName,vendorAdd,vendorLoc,vendorSer,vendorPin,isActive from  vendor where vendorName ='"
						+ vendorName + "'", new RowMapper<VendorContact>() {
					public VendorContact mapRow(ResultSet rs, int row)
							throws SQLException {
						VendorContact s = new VendorContact();
						s.setVendorId(rs.getInt(1));
						s.setVendorName(rs.getString(2));
						s.setVendorAdd(rs.getString(3));
						s.setVendorLoc(rs.getString(4));
						s.setVendorSer(rs.getString(5));
						s.setVendorPin(rs.getString(6));
						s.setIsActive(rs.getInt(7));
						return s;
					}
				});
	}

	// List Vendor by Id
	public VendorContact getVendorById(int vendorId) {

		String sql = "select v.vendorId,v.vendorName,v.vendorAdd,v.vendorLoc,v.vendorSer,v.vendorPin,s.staffId,s.staffName,s.staffDept,s.staffEmail,s.satffPhno from  vendor v join staff s on v.vendorId=s.vendorId  where v.isActive=0 and v.vendorId ="
				+ vendorId;
		return template.queryForObject(sql, new Object[] {},
				new BeanPropertyRowMapper<VendorContact>(VendorContact.class));

	}

	// Disable vendor
	public int disableVendor(int vendorId) {

		String sql = "update vendor set isActive=1 where vendorId=" + vendorId
				+ "";

		return template.update(sql);
	}

	// Update Vendor,staff details
	public int updateVendor(VendorContact a1, int vendorId) {

		String sql = "update vendor set vendorName='" + a1.getVendorName()

		+ "',vendorAdd='" + a1.getVendorAdd() + "',isActive="
				+ a1.getIsActive() + ",vendorLoc='" + a1.getVendorLoc()

				+ "',vendorSer='" + a1.getVendorSer() + "',vendorPin='"
				+ a1.getVendorPin() + "'  where vendorId=" + vendorId;

		template.update(sql);
		String sql1 = "update staff set vendorid=" + vendorId + ",staffname='"
				+ a1.getStaffName() + "',staffDept='" + a1.getStaffDept()
				+ "',staffEmail='" + a1.getStaffEmail() + "',satffPhno='"
				+ a1.getSatffPhno() + "'where staffId = " + a1.getStaffId();

		return template.update(sql1);
	}

	// Save new vendor or staff
	public int saveVendor(VendorContact a1) {

		String sql1 = "insert into vendor(vendorName,vendorAdd,vendorLoc,vendorSer,vendorPin,isActive) values"

				+ "('"
				+ a1.getVendorName()
				+ "','"

				+ a1.getVendorAdd()
				+ "','"
				+ a1.getVendorLoc()
				+ "','"
				+ a1.getVendorSer()
				+ "','"
				+ a1.getVendorPin()
				+ "',"
				+ 0
				+ ")";

		template.update(sql1);
		Integer maxId = getSequence();

		String sql4 = "insert into staff( vendorId,staffName,staffDept,staffEmail,satffPhno) values ("
				+ maxId
				+ ",'"
				+ a1.getStaffName()
				+ "','"
				+ a1.getStaffDept()
				+ "','" + a1.getStaffEmail() + "','" + a1.getSatffPhno() + "')";
		return template.update(sql4);

	}

	// Get Autogenerated vendor Id
	public Integer getSequence() {
		Integer seq;
		String sql = "select MAX(vendorid)from vendor";
		seq = template.queryForObject(sql, new Object[] {}, Integer.class);
		return seq;
	}

	// List of Staff
	public List<VendorContact> getStaff() {
		return template
				.query("select staffId,staffName,staffDept,staffEmail,satffPhno,vendorId from staff",
						new RowMapper<VendorContact>() {
							public VendorContact mapRow(ResultSet rs, int row)
									throws SQLException {
								VendorContact s = new VendorContact();
								s.setStaffId(rs.getInt(1));
								s.setStaffName(rs.getString(2));
								s.setStaffDept(rs.getString(3));
								s.setStaffEmail(rs.getString(4));
								s.setSatffPhno(rs.getString(5));
								s.setVendorId(rs.getInt(6));
								return s;
							}
						});
	}

	// List Staff By name
	public List<VendorContact> getStaffByName(String staffName) {
		return template
				.query("select staffId,staffName,staffDept,staffEmail,satffPhno,vendorId from staff where staffName ='"
						+ staffName + "'", new RowMapper<VendorContact>() {
					public VendorContact mapRow(ResultSet rs, int row)
							throws SQLException {
						VendorContact s = new VendorContact();
						s.setStaffId(rs.getInt(1));
						s.setStaffName(rs.getString(2));
						s.setStaffDept(rs.getString(3));
						s.setStaffEmail(rs.getString(4));
						s.setSatffPhno(rs.getString(5));
						s.setVendorId(rs.getInt(6));
						return s;
					}
				});
	}

	// List staff by id
	public VendorContact getStaffById(int staffId) {

		String sql = "select staffId,staffName,staffDept,staffEmail,satffPhno,vendorId from staff where staffId ="
				+ staffId;
		return template.queryForObject(sql, new Object[] {},
				new BeanPropertyRowMapper<VendorContact>(VendorContact.class));

	}

}
